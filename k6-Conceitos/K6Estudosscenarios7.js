import http from 'k6/http';

export const options = {
  scenarios: {
    contacts: {
      executor: 'constant-arrival-rate',
      duration: '30s',
      rate: 30,
      timeUnit: '1s',
      preAllocatedVUs: 50,
    },
  },
};

export default function () {
  http.get('https://test.k6.io/contacts.php');
}

/*
Como funciona constant-arrival-rate?
Esse executor controla a taxa de chegada de requisi√ß√µes, em vez de limitar o n√∫mero de usu√°rios ativos.

executor: 'constant-arrival-rate' ‚Üí Mant√©m uma taxa fixa de requisi√ß√µes, sem depender do n√∫mero de VUs.
duration: '30s' ‚Üí O teste dura 30 segundos.
rate: 30 ‚Üí O k6 gera 30 novas requisi√ß√µes por segundo.
timeUnit: '1s' ‚Üí A taxa de 30 requisi√ß√µes por segundo √© mantida durante todo o teste.
preAllocatedVUs: 50 ‚Üí Reserva at√© 50 usu√°rios virtuais para processar as requisi√ß√µes.

Como esse teste se comporta?
O k6 gera 30 requisi√ß√µes por segundo, independentemente do tempo de resposta do servidor.
Como o teste dura 30 segundos, o total de requisi√ß√µes ser√°:

uando usar constant-arrival-rate?
‚úÖ Use constant-arrival-rate quando:

Voc√™ precisa simular um tr√°fego constante em um site ou API, semelhante ao de um sistema real.
Quer garantir que o servidor aguente um n√∫mero exato de requisi√ß√µes por segundo.
Est√° testando limites de taxa (rate limiting) ou sistemas de escalabilidade.
‚û°Ô∏è Esse √© o melhor executor para simular cargas previs√≠veis, como picos de acesso em um site.

üìå C√°lculo das requisi√ß√µes:
30 req/s √ó 30s = 900 requisi√ß√µes no total

O k6 usar√° at√© 50 VUs para garantir essa taxa. Se 50 VUs forem insuficientes, pode ser necess√°rio aumentar esse n√∫mero.

*/